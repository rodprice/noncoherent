
#include <stdint.h>
#include <stdarg.h>
#include "Si4432.h"
#include "config.h"

#include "Arduino.h"
#include "SPI.h"


#define Si4432_SPI_SETTINGS (SPISettings(1000000, MSBFIRST, SPI_MODE0))


// Temporary storage for packet contents
#define DATALEN 24
static uint8_t _data[DATALEN];

// Configurations for packet and direct modes, respectively
extern radiocfg slow_packet;
extern radiocfg morse_code;


Si4432::Si4432() {
  _pcfg = &slow_packet;
  _dcfg = &morse_code;
  _direct = false;
  // configure SPI
  pinMode(NSEL_PIN, OUTPUT);
  digitalWrite(NSEL_PIN, HIGH);
  pinMode(NIRQ_PIN, INPUT);
  SPI.begin();
  // initialize static data
  for (uint8_t i=0; i<DATALEN; i++)
    _data[i] = 0;
  // configure Si4432 radio
  configure_gpio();
  set_frequency();
  packet_config();
  set_state(READY);
  _delay_ms(10);
}


// Read a register value from the radio
uint8_t Si4432::spi_read_register(uint8_t addr) {
  uint8_t value;
  digitalWrite(NSEL_PIN, LOW);           // chip select active
  SPI.beginTransaction( Si4432_SPI_SETTINGS );
  value = SPI.transfer( addr & ~BIT7 );  // send address
  value = SPI.transfer( 0 );             // read value
  SPI.endTransaction();
  digitalWrite(NSEL_PIN, HIGH);          // chip select inactive
  return value;
}

// Read a series of register values from the radio
uint8_t* Si4432::spi_read_burst(uint8_t addr, uint8_t *data, uint8_t len) {
  uint8_t i, value;
  SPI.beginTransaction( Si4432_SPI_SETTINGS );
  digitalWrite(NSEL_PIN, LOW);           // chip select active
  value = SPI.transfer( addr & ~BIT7 );  // send address
  for (i=0; i<len; i++)                  // read continuously
    data[i] = SPI.transfer( 0 );
  digitalWrite(NSEL_PIN, HIGH);          // chip select inactive
  SPI.endTransaction();
  return data;
}

// Write a value to a radio register
void Si4432::spi_write_register(uint8_t addr, uint8_t data) {
  uint8_t  value;
  SPI.beginTransaction( Si4432_SPI_SETTINGS );
  digitalWrite(NSEL_PIN, LOW);           // chip select active
  value = SPI.transfer( addr | BIT7 );   // send address
  value = SPI.transfer( data );          // send value
  digitalWrite(NSEL_PIN, HIGH);          // chip select inactive
  SPI.endTransaction();
}

// Write a series of register values to the radio
void Si4432::spi_write_burst(uint8_t addr, uint8_t *data, uint8_t len) {
  uint8_t i, value;
  SPI.beginTransaction( Si4432_SPI_SETTINGS );
  digitalWrite(NSEL_PIN, LOW);           // chip select active
  value = SPI.transfer( addr | BIT7 );   // send address
  for (i=0; i<len; i++)                  // write continuously
    value = SPI.transfer( data[i] );
  digitalWrite(NSEL_PIN, HIGH);          // chip select inactive
  SPI.endTransaction();
}

// Query the radio for state, returning a string
char* Si4432::state() {
  return show_state(get_power_state());
}

// Query the radio for state information
radiostate Si4432::get_state() {
  uint8_t status = spi_read_register( Si4432_DEVICE_STATUS );
  switch (status & 0x03) {
  case cpsidle:
    return READY;
  case cpsrx:
    if (_direct)
      return RECV_DIRECT;
    else
      return RECV_PACKET;
  case cpstx:
    if (_direct)     
      return XMIT_DIRECT;
    else
      return XMIT_PACKET;
  }
  return NULL;
}

radiostate Si4432::get_power_state() {
  uint8_t power_state = spi_read_register( Si4432_CRYSTAL_OSCILLATOR_POR_CONTROL );
  switch(power_state & internal_power_state_mask) {
  case internal_power_state_lp:
    return IDLE;
  case internal_power_state_ready:
    return READY;
  case internal_power_state_tune:
    return TUNE;
  case internal_power_state_rx:
   if (_direct)
      return RECV_DIRECT;
    else
      return RECV_PACKET;
  case internal_power_state_tx:
     if (_direct)
      return XMIT_DIRECT;
    else
      return XMIT_PACKET;
  }
  return SHUTDOWN;
}

char* Si4432::show_state(radiostate state) {
  switch (state) {
  case SHUTDOWN:
    return "SHUTDOWN";
  case IDLE:
    return "IDLE";
  case STANDBY:
    return "STANDBY";
  case SLEEP:
    return "SLEEP";
  case SENSOR:
    return "SENSOR";
  case READY:
    return "READY";
  case TUNE:
    return "TUNE";
  case XMIT_DIRECT:
    return "XMIT_DIRECT";
  case XMIT_PACKET:
    return "XMIT_PACKET";
  case RECV_DIRECT:
    return "RECV_DIRECT";
  case RECV_PACKET:
    return "RECV_PACKET";
  }
  return "unknown";
}


// Query the radio for status, defined as the EZMAC status register
uint8_t Si4432::show_ezmac(bool print) {
  uint8_t ezmac = spi_read_register( Si4432_EZMAC_STATUS );
  if (print) {
    Serial.print("EZMAC:");
    if (ezmac & rxcrc1  ) Serial.print("rxcrc1 ");
    if (ezmac & pksrch  ) Serial.print("pksrch ");
    if (ezmac & pkrx    ) Serial.print("pkrx ");
    if (ezmac & pkvalid ) Serial.print("pkvalid ");
    if (ezmac & crcerror) Serial.print("crcerror");
    if (ezmac & pktx    ) Serial.print("pktx ");
    if (ezmac & pksent  ) Serial.print("pksent ");
    Serial.println();
  }
  return ezmac;
}

uint16_t Si4432::show_data_rate(bool print) {
  uint8_t data1 = spi_read_register( Si4432_TX_DATA_RATE1 );
  uint8_t data0 = spi_read_register( Si4432_TX_DATA_RATE0 );
  uint8_t scale = spi_read_register( Si4432_MODULATION_CONTROL1 );
  uint16_t txdr = (data1 << 8) + data0;
  uint32_t result = 1000000 * txdr;
  if (print) {
    Serial.print("data rate: ");
    Serial.print(scale & txdtrtscale ? result >> 21 : result >> 16);
    Serial.print(" (0x");
    Serial.print(txdr, HEX);
    Serial.println(")");
  }
  return result;
}

uint16_t Si4432::show_frequency(bool print) {
  uint8_t fo1 = spi_read_register( Si4432_FREQUENCY_OFFSET1 );
  uint8_t fo2 = spi_read_register( Si4432_FREQUENCY_OFFSET2 );
  uint32_t fo = ((fo2 & 0x03) << 8) + fo1;
  uint8_t fhb = spi_read_register( Si4432_FREQUENCY_BAND );
  uint8_t fc1 = spi_read_register( Si4432_NOMINAL_CARRIER_FREQUENCY1 );
  uint8_t fc0 = spi_read_register( Si4432_NOMINAL_CARRIER_FREQUENCY0 );
  uint32_t fc = (fc1 << 8) + fc0;
  uint32_t fcarr = ((fhb & fb_mask) + 24);
  fcarr *= 10000;
  fcarr += (10*(fc+fo)) >> 6;
  fcarr = (fhb & hbsel) ? fcarr << 1 : fcarr ;
  uint16_t fhch = spi_read_register( Si4432_FREQUENCY_HOPPING_CHANNEL );
  uint16_t fhs = spi_read_register( Si4432_FREQUENCY_HOPPING_STEP_SIZE );
  fcarr += 10*fhs*fhch;
  if (print) {
    Serial.print("frequency (kHz): ");
    Serial.println(fcarr);
  }
  return (uint16_t)fcarr;
}

uint16_t Si4432::show_modulation_control(bool print) {
  uint8_t ctrl1 = spi_read_register( Si4432_MODULATION_CONTROL1 );
  uint8_t ctrl2 = spi_read_register( Si4432_MODULATION_CONTROL2 );
  if (print) {
    Serial.print("modulation control 1: 0x");
    Serial.print(ctrl1, HEX);
    Serial.print(", ");
    if (ctrl1 & txdtrtscale) Serial.print("txdtrtscale ");
    if (ctrl1 & enphpwdn   ) Serial.print("enphpwdn ");
    if (ctrl1 & manppol    ) Serial.print("manppol ");
    if (ctrl1 & enmaninv   ) Serial.print("enmaninv ");
    if (ctrl1 & enmanch    ) Serial.print("enmanch ");
    if (ctrl1 & enwhite    ) Serial.print("enwhite ");
    Serial.println();
    Serial.print("modulation control 2: 0x");
    Serial.print(ctrl2, HEX);
    Serial.print(", ");
    switch (ctrl2 & tx_data_clock_config_mask) {
    case tx_data_clock_none:
      Serial.print("tx_data_clock_none ");
      break;
    case tx_data_clock_gpio:
      Serial.print("tx_data_clock_gpio ");
      break;
    case tx_data_clock_sdo:
      Serial.print("tx_data_clock_sdo ");
      break;
    case tx_data_clock_nirq:
      Serial.print("tx_data_clock_nirq ");
      break;
    }
    switch (ctrl2 & dtmod_mask) {
    case dtmod_direct_gpio:
      Serial.print("dtmod_direct_gpio ");
      break;
    case dtmod_direct_sdi:
      Serial.print("dtmod_direct_sdi ");
      break;
    case dtmod_fifo:
      Serial.print("dtmod_fifo ");
      break;
    case dtmod_pn9:
      Serial.print("dtmod_pn9 ");
      break;
    }
    switch (ctrl2 & modtyp_mask) {
    case modtyp_unmodulated:
      Serial.print("modtyp_unmodulated ");
      break;
    case modtyp_ook:
      Serial.print("modtyp_ook ");
      break;
    case modtyp_fsk:
      Serial.print("modtyp_fsk ");
      break;
    case modtyp_gfsk:
      Serial.print("modtyp_gfsk ");
      break;
    }
    Serial.println();
  }
  return (ctrl2 << 8) + ctrl1;
}

/* There's a chicken and egg thing going on here.  If you wait for the
   nIRQ pin to go high, as the documentation says, you will wait
   forever, because the nIRQ pin won't go high until you read the
   interrupt status registers.  If, however, you read the status
   registers right away, you'll never read anything, because the
   Si4432 is still in reset.  For that reason, I'll just wait. */
bool Si4432::reset() {
  volatile uint8_t value;
  spi_write_register( Si4432_OPERATING_MODE1, swres );
  _delay_ms(10);            /* 10 ms delay is 20x max in data sheet */
  value = spi_read_register( Si4432_INTERRUPT_STATUS1 );
  value = spi_read_register( Si4432_INTERRUPT_STATUS2 );
  set_state(READY);
  _delay_ms(10);
  return (value | ipor) ? true : false ;
}

/* Check that communication over the SPI bus is taking place */
bool Si4432::check_device() {
  uint8_t type, version;
  type = spi_read_register( Si4432_DEVICE_TYPE );
  version = spi_read_register( Si4432_VERSION_CODE );
  return ((type == device_type_code) && (version == revision_B1));
}

// interrupt service routine for direct mode
#define AUDIO_TICKS 4
volatile uint16_t aticker = 0;
volatile uint8_t signal = LOW;
void direct_isr() {
  if (--aticker == 0) {
    aticker = AUDIO_TICKS;      // reset audio signal counter
    signal = signal ? LOW : HIGH ; // toggle audio signal
    digitalWrite(SDI_PIN, signal); // send signal to radio
  }
}

/* Transmit tone for `duration` milliseconds */
void Si4432::xmit_tone(uint16_t duration) {
  digitalWrite(NSEL_PIN, HIGH); // just to be sure
  init_tx_direct();             // tell radio to go to direct mode
  set_state(XMIT_DIRECT);       // start transmission
  SPI.end();                    // turn off SPI so we can use SPI pins
  
  signal = LOW;                 // initialize and attach audio interrupt
  digitalWrite(SDI_PIN, LOW);   // we have to do this here because we're 
  aticker = AUDIO_TICKS;        // using the SPI pins for other purposes
  attachInterrupt(digitalPinToInterrupt(SDO_PIN), direct_isr, FALLING);
  
  _delay_ms(duration);          // wait while transmission occurs
  
  detachInterrupt(digitalPinToInterrupt(SDO_PIN));
  SPI.begin();                  // start talking to the radio again
  set_state(READY);             // stop the transmission
  _delay_ms(10);                // sometimes the radio doesn't listen
  set_state(READY);             // so tell it to stop again
}

/* Set up Si4432 GPIO pins for use with Tinyduino */
void Si4432::configure_gpio() {
  spi_write_register(           /* controls transmit antenna */
    Si4432_GPIO_CONFIGURATION0,
    output_rx_state);
  spi_write_register(           /* controls receive antenna */
    Si4432_GPIO_CONFIGURATION1,
    output_tx_state);
  // spi_write_register(           /* set to output gnd */
  //   Si4432_GPIO_CONFIGURATION2,
  //   0x1F);
}

/* Frequency control stuff */
void Si4432::set_frequency() {
  /** Crystal oscillator load capacitance: 12.500 pF */
  spi_write_register( Si4432_OSCILLATOR_LOAD_CAPACITANCE, xlc_mask);

  /** Carrier frequency: 434.75 MHz */
  spi_write_register( Si4432_FREQUENCY_OFFSET1,           0);
  spi_write_register( Si4432_FREQUENCY_OFFSET2,           0);
  spi_write_register( Si4432_FREQUENCY_BAND,              _pcfg->frequency_band);
  spi_write_register( Si4432_NOMINAL_CARRIER_FREQUENCY1,  _pcfg->nominal_carrier_frequency1);
  spi_write_register( Si4432_NOMINAL_CARRIER_FREQUENCY0,  _pcfg->nominal_carrier_frequency0);

  /** Frequency hopping: none */
  spi_write_register( Si4432_FREQUENCY_HOPPING_STEP_SIZE, 0);
  spi_write_register( Si4432_FREQUENCY_HOPPING_CHANNEL,   0);
}

/* Transmitter setup */
void Si4432::init_tx_direct() {
  spi_write_register( Si4432_TX_DATA_RATE1,       _dcfg->tx_data_rate1 );
  spi_write_register( Si4432_TX_DATA_RATE0,       _dcfg->tx_data_rate1 );
  spi_write_register( Si4432_MODULATION_CONTROL1, _dcfg->modulation_control1 );
  spi_write_register( Si4432_MODULATION_CONTROL2, _dcfg->modulation_control2 );
  spi_write_register( Si4432_FREQUENCY_DEVIATION, _dcfg->tx_frequency_deviation ); 
}

void Si4432::init_tx_packet() {
  spi_write_register( Si4432_TX_DATA_RATE1,       _pcfg->tx_data_rate1 );
  spi_write_register( Si4432_TX_DATA_RATE0,       _pcfg->tx_data_rate0 );
  spi_write_register( Si4432_MODULATION_CONTROL1, _pcfg->modulation_control1 );
  spi_write_register( Si4432_MODULATION_CONTROL2, _pcfg->modulation_control2 );
  spi_write_register( Si4432_FREQUENCY_DEVIATION, _pcfg->tx_frequency_deviation ); 
}

void Si4432::init_rx_packet() {
  spi_write_register( Si4432_IF_FILTER_BANDWIDTH,               _pcfg->if_filter_bandwidth);
  spi_write_register( Si4432_AFC_LOOP_GEARSHIFT_OVERRIDE,       _pcfg->afc_loop_gearshift_override);
  spi_write_register( Si4432_CLOCK_RECOVERY_GEARSHIFT_OVERRIDE, _pcfg->clock_recovery_gearshift_override);
  spi_write_register( Si4432_CLOCK_RECOVERY_OVERSAMPLING_RATIO, _pcfg->clock_recovery_oversampling_rate);
  spi_write_register( Si4432_CLOCK_RECOVERY_OFFSET2,            _pcfg->clock_recovery_offset2);
  spi_write_register( Si4432_CLOCK_RECOVERY_OFFSET1,            _pcfg->clock_recovery_offset1);
  spi_write_register( Si4432_CLOCK_RECOVERY_OFFSET0,            _pcfg->clock_recovery_offset0);
  spi_write_register( Si4432_CLOCK_RECOVERY_TIMING_LOOP_GAIN1,  _pcfg->clock_recovery_timing_loop_gain1);
  spi_write_register( Si4432_CLOCK_RECOVERY_TIMING_LOOP_GAIN0,  _pcfg->clock_recovery_timing_loop_gain0);
  spi_write_register( Si4432_OOK_COUNTER_VALUE_1,               _pcfg->ook_counter_value_1);
  spi_write_register( Si4432_OOK_COUNTER_VALUE_2,               _pcfg->ook_counter_value_2);
  spi_write_register( Si4432_SLICER_PEAK_HOLD,                  _pcfg->slicer_peak_hold);
  spi_write_register( Si4432_AGC_OVERRIDE1,                     _pcfg->agc_override1);
  spi_write_register( Si4432_AFC_LOOP_GEARSHIFT_OVERRIDE,       _pcfg->afc_loop_gearshift_override);
  spi_write_register( Si4432_AFC_TIMING_CONTROL,                _pcfg->afc_timing_control);
  spi_write_register( Si4432_FREQUENCY_DEVIATION,               _pcfg->rx_frequency_deviation ); 
}

void Si4432::packet_config() {
  /* uint8_t tx_fifo_almost_full = ; */
  /* spi_write_register( Si4432_TX_FIFO_CONTROL1, rxafthr_mask); */
  uint8_t tx_fifo_almost_empty = 4; /* threshold for txffaam interrupt */
  uint8_t rx_fifo_almost_full = 55; /* threshold for rxffafull interrupt */
  spi_write_register( Si4432_TX_FIFO_CONTROL2, tx_fifo_almost_empty);
  spi_write_register( Si4432_RX_FIFO_CONTROL, rx_fifo_almost_full);
  spi_write_register( Si4432_DATA_ACCESS_CONTROL,
                     enpacrx    | /* automatic rx packet handling */
                     enpactx    | /* automatic tx packet handling */
                     encrc      | /* check CRC against data fields only */
                     crc_ibm_16 ); /* use IBM 16 CRC polynomial */
  uint8_t bcen = 0x80;            /* broadcast address check enable */
  uint8_t hdch = 0x08;            /* received header bytes to be checked */
  spi_write_register( Si4432_HEADER_CONTROL1, bcen | hdch);
  spi_write_register( Si4432_PREAMBLE_LENGTH, 8); /* set preamble length */
  spi_write_register( Si4432_SYNC_WORD3, 0x2D);   /* first sync byte */
  spi_write_register( Si4432_SYNC_WORD2, 0xD4);   /* second sync byte */
  spi_write_register( Si4432_SYNC_WORD1, 0x00);
  spi_write_register( Si4432_SYNC_WORD0, 0x00);
  spi_write_register( Si4432_HEADER_CONTROL2, 0x22); /* por default value */
  spi_write_register( Si4432_HEADER_ENABLE3, 0xFF);
  spi_write_register( Si4432_HEADER_ENABLE2, 0xFF);
  spi_write_register( Si4432_HEADER_ENABLE1, 0xFF);
  spi_write_register( Si4432_HEADER_ENABLE0, 0xFF);
}

// void Si4432::packet_config() {
//   /* uint8_t tx_fifo_almost_full = ; */
//   /* spi_write_register( Si4432_TX_FIFO_CONTROL1, rxafthr_mask); */
//   uint8_t tx_fifo_almost_empty = 4; /* threshold for txffaam interrupt */
//   uint8_t rx_fifo_almost_full = 55; /* threshold for rxffafull interrupt */
//   spi_write_register( Si4432_TX_FIFO_CONTROL2, tx_fifo_almost_empty);
//   spi_write_register( Si4432_RX_FIFO_CONTROL, rx_fifo_almost_full);
//   spi_write_register( Si4432_DATA_ACCESS_CONTROL,
//                      enpacrx    | /* automatic rx packet handling */
//                      enpactx    | /* automatic tx packet handling */
//                      encrc      | /* check CRC against data fields only */
//                      crc_ibm_16 ); /* use IBM 16 CRC polynomial */
//   uint8_t bcen = 0x80;            /* broadcast address check enable */
//   uint8_t hdch = 0x08;            /* received header bytes to be checked */
//   spi_write_register( Si4432_HEADER_CONTROL1, bcen | hdch);
//   spi_write_register( Si4432_PREAMBLE_LENGTH, 8); /* set preamble length */
//   spi_write_register( Si4432_SYNC_WORD3, 0x2D);   /* first sync byte */
//   spi_write_register( Si4432_SYNC_WORD2, 0xD4);   /* second sync byte */
//   spi_write_register( Si4432_SYNC_WORD1, 0x00);
//   spi_write_register( Si4432_SYNC_WORD0, 0x00);
//   spi_write_register( Si4432_HEADER_CONTROL2, 0x22); /* por default value */
//   spi_write_register( Si4432_HEADER_ENABLE3, 0xFF);
//   spi_write_register( Si4432_HEADER_ENABLE2, 0xFF);
//   spi_write_register( Si4432_HEADER_ENABLE1, 0xFF);
//   spi_write_register( Si4432_HEADER_ENABLE0, 0xFF);
// }

void Si4432::load_packet(uint8_t *data, uint8_t len) {
  /* reset and clear FIFO */
  spi_write_register( Si4432_OPERATING_MODE2, ffclrtx);
  spi_write_register( Si4432_OPERATING_MODE2, 0x00);
  /* load up the xmit FIFO */
  spi_write_register( Si4432_PACKET_LENGTH, len);
  spi_write_burst( Si4432_FIFO_ACCESS, data, len);
  spi_write_register( Si4432_PREAMBLE_LENGTH, 8); /* set preamble length */
  /* enable packet sent interrupt, disable others */
  spi_write_register( Si4432_INTERRUPT_ENABLE1, enpksent);
  spi_write_register( Si4432_INTERRUPT_ENABLE2, 0x00);
  /* clear any pending interrupts */
  spi_read_register( Si4432_INTERRUPT_STATUS1);
  spi_read_register( Si4432_INTERRUPT_STATUS2);
}

/* Set Si4432 chip state, turn on/off transmitter and receiver */
void Si4432::set_state(radiostate state) {
  switch (state) {
  case TUNE:
  case SHUTDOWN:
    break;
  case IDLE:
  case STANDBY:
  case SLEEP:
  case SENSOR:
  case READY:
    spi_write_register( Si4432_OPERATING_MODE1, xton);
    spi_write_register( Si4432_OPERATING_MODE2, 0x00);
    break;
  case XMIT_DIRECT:
    // init_tx_direct();
    spi_write_register( Si4432_TX_POWER, txpow_max | lna_sw );
    spi_write_register( Si4432_OPERATING_MODE1, txon | xton);
    // spi_write_register( Si4432_OPERATING_MODE2, 0x00);
    _delay_ms(10);
    break;
  case XMIT_PACKET:
    init_tx_packet();
    spi_write_register( Si4432_TX_POWER, txpow_max | lna_sw );
    spi_write_register( Si4432_OPERATING_MODE1, txon | xton);
    break;
  case RECV_DIRECT:
    /* unimplemented, probably won't */
    set_state(READY);
    break;
  case RECV_PACKET:
    /* not yet tested */
    init_rx_packet();
    spi_write_register( Si4432_OPERATING_MODE1, rxon | xton);
    break;
  }
}

